startdate =
currentdate =
cds = ; current date string
sds = ; start date string
 
inputbox, sds, Startdatum, op welke datum starten (format dd/mm/yyyy), , , 130, , , , , 

startdate := DateParse(sds)
currentdate := startdate
formattime, cds, %currentdate%, shortdate


function_fillday1(cds)

loop, 4
{
currentdate += 1, days
formattime, cds, %currentdate%, shortdate
function_fillotherday(cds)
sleep 200
}

return



/*
	Function: DateParse
		Converts almost any date format to a YYYYMMDDHH24MISS value.

	Parameters:
		str - a date/time stamp as a string

	Returns:
		A valid YYYYMMDDHH24MISS value which can be used by FormatTime, EnvAdd and other time commands.

	Example:
> time := DateParse("2:35 PM, 27 November, 2007")

	License:
		- Version 1.05 <http://www.autohotkey.net/~polyethene/#dateparse>
		- Dedicated to the public domain (CC0 1.0) <http://creativecommons.org/publicdomain/zero/1.0/>
*/
/*
	With modifications from http://www.autohotkey.com/board/topic/18760-date-parser-convert-any-date-format-to-yyyymmddhh24miss/page-5#entry561591
*/
/*
Modified return values:
	Partial date returns
		No month : nothing
		No year and no day : nothing
		Time and no day :nothing
		Month and year without time : substitute 1st for day
		Day and month : substitute current year
	No date and time still substitutes current date
Allow no separator aorund named months (eg 25May60)
Only alphabetic Month name follow on characters to prevent month taking first 2 digits of 4 digit year if there are no separators eg in 25May1960 year group only gets 60 and becomes 2060
Separators relaxed, can be any character except letter or digit
Search for named months first to prevent number month incorrectly matching in "Feb 12 11" as day =12 month=11 and skipping named month match
With named months day or year are optional
If numeric month is > 12 and day is <= 12 swap month and day (probably american date)
*/
DateParse(str, americanOrder=0) 
{
	static monthNames := "(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-zA-Z]*"
		, dayAndMonth := "(\d{1,2})[^a-zA-Z0-9:.]+(\d{1,2})"
		, dayAndMonthName := "(?:(?<Month>" . monthNames . ")[^a-zA-Z0-9:.]*(?<Day>\d{1,2})[^a-zA-Z0-9]+|(?<Day>\d{1,2})[^a-zA-Z0-9:.]*(?<Month>" . monthNames . "))"
		, monthNameAndYear := "(?<Month>" . monthNames . ")[^a-zA-Z0-9:.]*(?<Year>(?:\d{4}|\d{2}))"
	If RegExMatch(str, "i)^\s*(?:(\d{4})([\s\-:\/])(\d{1,2})\2(\d{1,2}))?(?:\s*[T\s](\d{1,2})([\s\-:\/])(\d{1,2})(?:\6(\d{1,2})\s*(?:(Z)|(\+|\-)?(\d{1,2})\6(\d{1,2})(?:\6(\d{1,2}))?)?)?)?\s*$", i) ;ISO 8601 timestamps
		year := i1, month := i3, day := i4, t1 := i5, t2 := i7, t3 := i8
	Else If !RegExMatch(str, "^\W*(\d{1,2}+)(\d{2})\W*$", t){
		RegExMatch(str, "i)(\d{1,2})"					;hours
				. "\s*:\s*(\d{1,2})"				;minutes
				. "(?:\s*:\s*(\d{1,2}))?"			;seconds
				. "(?:\s*([ap]m))?", t)				;am/pm
		StringReplace, str, str, %t%
		if RegExMatch(str, "Ji)" . dayAndMonthName . "[^a-zA-Z0-9]*(?<Year>(?:\d{4}|\d{2}))?", d) ; named month eg 22May14; May 14, 2014; 22May, 2014
			year := dYear, month := dMonth, day := dDay
		else if Regexmatch(str, "i)" . monthNameAndYear, d) ; named month and year without day eg May14; May 2014
				year := dYear, month := dMonth
		else {
			If Regexmatch(str, "i)(\d{4})[^a-zA-Z0-9:.]+" . dayAndMonth, d) ;2004/22/03
				year := d1, month := d3, day := d2
			Else If Regexmatch(str, "i)" . dayAndMonth . "(?:[^a-zA-Z0-9:.]+((?:\d{4}|\d{2})))?", d) ;22/03/2004 or 22/03/04
				year := d3, month := d2, day := d1
			If (RegExMatch(day, monthNames) or americanOrder and !RegExMatch(month, monthNames) or (month > 12 and day <= 12)) ;try to infer day/month order
				tmp := month, month := day, day := tmp
		}
	}
	f = %A_FormatFloat%
	SetFormat, Float, 02.0
	if (day or month or year) and not (day and month and year) ; partial date
		if not month or not (day or month) or (t1 and not day) ; partial date must have month and day with time or day or year without time
			return
		else if not day ; without time use 1st for day if not present
			day := 1
	d := (StrLen(year) == 2 ? "20" . year : (year ? year : A_YYYY))
		. ((month := month + 0 ? month : InStr(monthNames, SubStr(month, 1, 3)) // 4 ) > 0 ? month + 0.0 : A_MM)
		. ((day += 0.0) ? day : A_DD) 
		. t1 + (t1 == 12 ? t4 = "am" ? -12.0 : 0.0 : t4 = "pm" ? 12.0 : 0.0)
		. t2 + 0.0 . t3 + 0.0
	SetFormat, Float, %f%
	return, d
}

function_fillday1(cds)
{
  Run, "C:\Program Files\Microsoft Office\root\Office16\outlook.exe" /c ipm.appointment
  WinWaitActive Untitled - Appointment
  function_cryrap(cds)
  sleep 200
  Run, "C:\Program Files\Microsoft Office\root\Office16\outlook.exe" /c ipm.appointment
  WinWaitActive Untitled - Appointment
  function_newsletter(cds)
  sleep 200
  Run, "C:\Program Files\Microsoft Office\root\Office16\outlook.exe" /c ipm.appointment
  WinWaitActive Untitled - Appointment
  function_email(cds)
  sleep 200
  Run, "C:\Program Files\Microsoft Office\root\Office16\outlook.exe" /c ipm.appointment
  WinWaitActive Untitled - Appointment
  function_lunch(cds)
}

function_fillotherday(cds)
{
  Run, "C:\Program Files\Microsoft Office\root\Office16\outlook.exe" /c ipm.appointment
  WinWaitActive Untitled - Appointment
  function_newsletter(cds)
  Run, "C:\Program Files\Microsoft Office\root\Office16\outlook.exe" /c ipm.appointment
  WinWaitActive Untitled - Appointment
  function_email(cds)
  Run, "C:\Program Files\Microsoft Office\root\Office16\outlook.exe" /c ipm.appointment
  WinWaitActive Untitled - Appointment
  function_lunch(cds)
}
                                                      
function_cryrap(cds)
{
  sendinput cry-rap/c40/C*
  send {tab 2} ;date
  send %cds%
  send {tab}  ;starttime
  sendinput 09:30
  send {tab}  ;enddate
  send %cds%
  send {tab}  ;stoptime
  sendinput 10:00
  send {LAlt} ;reminder none
  sendinput h
  sleep 100
  sendinput r
  sleep 100
  sendinput e
  sleep 200
  send n 
  send {enter}
  send !s
}

function_newsletter(cds)
{
  sendinput t-fof-tw/C30/newsletters
  send {tab 2} ;date
  send %cds%
  send {tab}  ;starttime
  sendinput 13:30
  send {tab}  ;enddate
  send %cds%
  send {tab}  ;stoptime
  sendinput 14:00
  send {LAlt} ;reminder none
  sendinput h
  sleep 100
  sendinput r
  sleep 100
  sendinput e
  sleep 200
  send n 
  send {enter}
  send !s
}


function_email(cds)
{
  sendinput t-fof-ak/c40/e-mail en tel
  send {tab 2} ;date
  send %cds%
  send {tab}  ;starttime
  sendinput 14:00
  send {tab}  ;enddate
  send %cds%
  send {tab}  ;stoptime
  sendinput 14:30
  send {LAlt} ;reminder none
  sendinput h
  sleep 100
  sendinput r
  sleep 100
  sendinput e
  sleep 200
  send n 
  send {enter}
  send !s
}



function_lunch(cds)
{
  sendinput lunch
  send {tab 2} ;date
  send %cds%
  send {tab}  ;starttime
  sendinput 12:30

  send {tab}  ;enddate

  send %cds%

  send {tab}  ;stoptime

  sendinput 13:30
  send {LAlt} ;reminder none
  sendinput h
  sleep 100
  sendinput r
  sleep 100
  sendinput e
  sleep 200
  send n 
  send {enter}
  send {LAlt} ;category = verlof
  sleep 100
  send h
  sleep 100
  send g
  sleep 100
  send a
  sleep 400
  sendinput {raw} verlof (sendinput)
  sleep 200
  send {space}
  send {enter}
  send !s
}

